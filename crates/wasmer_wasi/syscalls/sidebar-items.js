initSidebarItems({"fn":[["args_get","`args_get()` Read command-line argument data. The sizes of the buffers should match that returned by `args_sizes_get()`. Inputs: - `char **argv`     A pointer to a buffer to write the argument pointers. - `char *argv_buf`     A pointer to a buffer to write the argument string data."],["args_sizes_get","`args_sizes_get()` Return command-line argument data sizes. Outputs: - `size_t *argc`     The number of arguments. - `size_t *argv_buf_size`     The size of the argument string data."],["clock_res_get","`clock_res_get()` Get the resolution of the specified clock Input: - `__wasi_clockid_t clock_id`     The ID of the clock to get the resolution of Output: - `__wasi_timestamp_t *resolution`     The resolution of the clock in nanoseconds"],["clock_time_get","`clock_time_get()` Get the time of the specified clock Inputs: - `__wasi_clockid_t clock_id`     The ID of the clock to query - `__wasi_timestamp_t precision`     The maximum amount of error the reading may have Output: - `__wasi_timestamp_t *time`     The value of the clock in nanoseconds"],["environ_get","`environ_get()` Read environment variable data. The sizes of the buffers should match that returned by `environ_sizes_get()`. Inputs: - `char **environ`     A pointer to a buffer to write the environment variable pointers. - `char *environ_buf`     A pointer to a buffer to write the environment variable string data."],["environ_sizes_get","`environ_sizes_get()` Return command-line argument data sizes. Outputs: - `size_t *environ_count`     The number of environment variables. - `size_t *environ_buf_size`     The size of the environment variable string data."],["fd_advise","`fd_advise()` Advise the system about how a file will be used Inputs: - `__wasi_fd_t fd`     The file descriptor the advice applies to - `__wasi_filesize_t offset`     The offset from which the advice applies - `__wasi_filesize_t len`     The length from the offset to which the advice applies - `__wasi_advice_t advice`     The advice to give"],["fd_allocate","`fd_allocate` Allocate extra space for a file descriptor Inputs: - `__wasi_fd_t fd`     The file descriptor to allocate for - `__wasi_filesize_t offset`     The offset from the start marking the beginning of the allocation - `__wasi_filesize_t len`     The length from the offset marking the end of the allocation"],["fd_close","`fd_close()` Close an open file descriptor Inputs: - `__wasi_fd_t fd`     A file descriptor mapping to an open file to close Errors: - `__WASI_EISDIR`     If `fd` is a directory - `__WASI_EBADF`     If `fd` is invalid or not open"],["fd_datasync","`fd_datasync()` Synchronize the file data to disk Inputs: - `__wasi_fd_t fd`     The file descriptor to sync"],["fd_fdstat_get","`fd_fdstat_get()` Get metadata of a file descriptor Input: - `__wasi_fd_t fd`     The file descriptor whose metadata will be accessed Output: - `__wasi_fdstat_t *buf`     The location where the metadata will be written"],["fd_fdstat_set_flags","`fd_fdstat_set_flags()` Set file descriptor flags for a file descriptor Inputs: - `__wasi_fd_t fd`     The file descriptor to apply the new flags to - `__wasi_fdflags_t flags`     The flags to apply to `fd`"],["fd_fdstat_set_rights","`fd_fdstat_set_rights()` Set the rights of a file descriptor.  This can only be used to remove rights Inputs: - `__wasi_fd_t fd`     The file descriptor to apply the new rights to - `__wasi_rights_t fs_rights_base`     The rights to apply to `fd` - `__wasi_rights_t fs_rights_inheriting`     The inheriting rights to apply to `fd`"],["fd_filestat_get","`fd_filestat_get()` Get the metadata of an open file Input: - `__wasi_fd_t fd`     The open file descriptor whose metadata will be read Output: - `__wasi_filestat_t *buf`     Where the metadata from `fd` will be written"],["fd_filestat_set_size","`fd_filestat_set_size()` Change the size of an open file, zeroing out any new bytes Inputs: - `__wasi_fd_t fd`     File descriptor to adjust - `__wasi_filesize_t st_size`     New size that `fd` will be set to"],["fd_filestat_set_times","`fd_filestat_set_times()` Set timestamp metadata on a file Inputs: - `__wasi_timestamp_t st_atim`     Last accessed time - `__wasi_timestamp_t st_mtim`     Last modified time - `__wasi_fstflags_t fst_flags`     Bit-vector for controlling which times get set"],["fd_pread","`fd_pread()` Read from the file at the given offset without updating the file cursor. This acts like a stateless version of Seek + Read Inputs: - `__wasi_fd_t fd`     The file descriptor to read the data with - `const __wasi_iovec_t* iovs'     Vectors where the data will be stored - `size_t iovs_len`    The number of vectors to store the data into -`__wasi_filesize_t offset`    The file cursor to use: the starting position from which data will be read Output: -`size_t nread`     The number of bytes read"],["fd_prestat_dir_name",""],["fd_prestat_get","`fd_prestat_get()` Get metadata about a preopened file descriptor Input: - `__wasi_fd_t fd`     The preopened file descriptor to query Output: - `__wasi_prestat *buf`     Where the metadata will be written"],["fd_pwrite","`fd_pwrite()` Write to a file without adjusting its offset Inputs: - `__wasi_fd_t`     File descriptor (opened with writing) to write to - `const __wasi_ciovec_t *iovs`     List of vectors to read data from - `u32 iovs_len`     Length of data in `iovs` - `__wasi_filesize_t offset`     The offset to write at Output: - `u32 *nwritten`     Number of bytes written"],["fd_read","`fd_read()` Read data from file descriptor Inputs: - `__wasi_fd_t fd`     File descriptor from which data will be read - `const __wasi_iovec_t *iovs`     Vectors where data will be stored - `u32 iovs_len`     Length of data in `iovs` Output: - `u32 *nread`     Number of bytes read"],["fd_readdir","`fd_readdir()` Read data from directory specified by file descriptor Inputs: - `__wasi_fd_t fd`     File descriptor from which directory data will be read - `void *buf`     Buffer where directory entries are stored - `u32 buf_len`     Length of data in `buf` - `__wasi_dircookie_t cookie`     Where the directory reading should start from Output: - `u32 *bufused`     The Number of bytes stored in `buf`; if less than `buf_len` then entire     directory has been read"],["fd_renumber","`fd_renumber()` Atomically copy file descriptor Inputs: - `__wasi_fd_t from`     File descriptor to copy - `__wasi_fd_t to`     Location to copy file descriptor to"],["fd_seek","`fd_seek()` Update file descriptor offset Inputs: - `__wasi_fd_t fd`     File descriptor to mutate - `__wasi_filedelta_t offset`     Number of bytes to adjust offset by - `__wasi_whence_t whence`     What the offset is relative to Output: - `__wasi_filesize_t *fd`     The new offset relative to the start of the file"],["fd_sync","`fd_sync()` Synchronize file and metadata to disk (TODO: expand upon what this means in our system) Inputs: - `__wasi_fd_t fd`     The file descriptor to sync Errors: TODO: figure out which errors this should return - `__WASI_EPERM` - `__WASI_ENOTCAPABLE`"],["fd_tell","`fd_tell()` Get the offset of the file descriptor Inputs: - `__wasi_fd_t fd`     The file descriptor to access Output: - `__wasi_filesize_t *offset`     The offset of `fd` relative to the start of the file"],["fd_write","`fd_write()` Write data to the file descriptor Inputs: - `__wasi_fd_t`     File descriptor (opened with writing) to write to - `const __wasi_ciovec_t *iovs`     List of vectors to read data from - `u32 iovs_len`     Length of data in `iovs` Output: - `u32 *nwritten`     Number of bytes written Errors:"],["get_current_time_in_nanos",""],["get_memory_and_wasi_state","This function is not safe"],["has_rights","checks that `rights_check_set` is a subset of `rights_set`"],["path_create_directory","`path_create_directory()` Create directory at a path Inputs: - `__wasi_fd_t fd`     The directory that the path is relative to - `const char *path`     String containing path data - `u32 path_len`     The length of `path` Errors: Required Rights: - __WASI_RIGHT_PATH_CREATE_DIRECTORY     This right must be set on the directory that the file is created in (TODO: verify that this is true)"],["path_filestat_get","`path_filestat_get()` Access metadata about a file or directory Inputs: - `__wasi_fd_t fd`     The directory that `path` is relative to - `__wasi_lookupflags_t flags`     Flags to control how `path` is understood - `const char *path`     String containing the file path - `u32 path_len`     The length of the `path` string Output: - `__wasi_file_stat_t *buf`     The location where the metadata will be stored"],["path_filestat_set_times","`path_filestat_set_times()` Update time metadata on a file or directory Inputs: - `__wasi_fd_t fd`     The directory relative to which the path is resolved - `__wasi_lookupflags_t flags`     Flags to control how the path is understood - `const char *path`     String containing the file path - `u32 path_len`     The length of the `path` string - `__wasi_timestamp_t st_atim`     The timestamp that the last accessed time attribute is set to -  `__wasi_timestamp_t st_mtim`     The timestamp that the last modified time attribute is set to - `__wasi_fstflags_t fst_flags`     A bitmask controlling which attributes are set"],["path_link","`path_link()` Create a hard link Inputs: - `__wasi_fd_t old_fd`     The directory relative to which the `old_path` is - `__wasi_lookupflags_t old_flags`     Flags to control how `old_path` is understood - `const char *old_path`     String containing the old file path - `u32 old_path_len`     Length of the `old_path` string - `__wasi_fd_t new_fd`     The directory relative to which the `new_path` is - `const char *new_path`     String containing the new file path - `u32 old_path_len`     Length of the `new_path` string"],["path_open","`path_open()` Open file located at the given path Inputs: - `__wasi_fd_t dirfd`     The fd corresponding to the directory that the file is in - `__wasi_lookupflags_t dirflags`     Flags specifying how the path will be resolved - `char *path`     The path of the file or directory to open - `u32 path_len`     The length of the `path` string - `__wasi_oflags_t o_flags`     How the file will be opened - `__wasi_rights_t fs_rights_base`     The rights of the created file descriptor - `__wasi_rights_t fs_rightsinheriting`     The rights of file descriptors derived from the created file descriptor - `__wasi_fdflags_t fs_flags`     The flags of the file descriptor Output: - `__wasi_fd_t* fd`     The new file descriptor Possible Errors: - `__WASI_EACCES`, `__WASI_EBADF`, `__WASI_EFAULT`, `__WASI_EFBIG?`, `__WASI_EINVAL`, `__WASI_EIO`, `__WASI_ELOOP`, `__WASI_EMFILE`, `__WASI_ENAMETOOLONG?`, `__WASI_ENFILE`, `__WASI_ENOENT`, `__WASI_ENOTDIR`, `__WASI_EROFS`, and `__WASI_ENOTCAPABLE`"],["path_readlink","`path_readlink()` Read the value of a symlink Inputs: - `__wasi_fd_t dir_fd`     The base directory from which `path` is understood - `const char *path`     Pointer to UTF-8 bytes that make up the path to the symlink - `u32 path_len`     The number of bytes to read from `path` - `u32 buf_len`     Space available pointed to by `buf` Outputs: - `char *buf`     Pointer to characters containing the path that the symlink points to - `u32 buf_used`     The number of bytes written to `buf`"],["path_remove_directory","Returns __WASI_ENOTEMTPY if directory is not empty"],["path_rename","`path_rename()` Rename a file or directory Inputs: - `__wasi_fd_t old_fd`     The base directory for `old_path` - `const char* old_path`     Pointer to UTF8 bytes, the file to be renamed - `u32 old_path_len`     The number of bytes to read from `old_path` - `__wasi_fd_t new_fd`     The base directory for `new_path` - `const char* new_path`     Pointer to UTF8 bytes, the new file name - `u32 new_path_len`     The number of bytes to read from `new_path`"],["path_symlink","`path_symlink()` Create a symlink Inputs: - `const char *old_path`     Array of UTF-8 bytes representing the source path - `u32 old_path_len`     The number of bytes to read from `old_path` - `__wasi_fd_t fd`     The base directory from which the paths are understood - `const char *new_path`     Array of UTF-8 bytes representing the target path - `u32 new_path_len`     The number of bytes to read from `new_path`"],["path_unlink_file","`path_unlink_file()` Unlink a file, deleting if the number of hardlinks is 1 Inputs: - `__wasi_fd_t fd`     The base file descriptor from which the path is understood - `const char *path`     Array of UTF-8 bytes representing the path - `u32 path_len`     The number of bytes in the `path` array"],["poll_oneoff","`poll_oneoff()` Concurrently poll for a set of events Inputs: - `const __wasi_subscription_t *in`     The events to subscribe to - `__wasi_event_t *out`     The events that have occured - `u32 nsubscriptions`     The number of subscriptions and the number of events Output: - `u32 nevents`     The number of events seen"],["proc_exit",""],["proc_raise",""],["random_get","`random_get()` Fill buffer with high-quality random data.  This function may be slow and block Inputs: - `void *buf`     A pointer to a buffer where the random bytes will be written - `size_t buf_len`     The number of bytes that will be written"],["read_bytes",""],["sched_yield","`sched_yield()` Yields execution of the thread"],["sock_recv",""],["sock_send",""],["sock_shutdown",""],["write_buffer_array",""],["write_bytes",""],["write_bytes_inner",""]],"mod":[["legacy","These modules provide wrappers and implementations for older version of WASI."],["types",""],["unix",""]]});